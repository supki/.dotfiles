:set prompt "Î¼> "
:set editor vim

import           Control.Applicative
import           Control.Arrow
import           Control.Monad
import           Data.Bits
import           Data.Char
import           Data.Function (fix, on)
import           Data.Int
import           Data.List
import           Data.Maybe
import           Data.Ratio hiding ((%))
import           Data.Word
import           Prelude
import           System.IO
import           System.IO.Unsafe
import           Text.Printf
import           Unsafe.Coerce

import           Control.Lens
import           Control.Monad.Error
import           Control.Monad.Reader
import           Control.Monad.Writer hiding ((<>))
import           Control.Monad.State
import           Control.Monad.Free
import           Control.Monad.Trans
import           Data.Functor.Foldable
import           Data.List.Lens
import           Data.Proxy
import           Data.Reflection
import           Data.Semigroup
import           Data.Tagged
import           Prelude.Unicode
import           System.Directory
import           System.FilePath
import           System.FilePath.Lens
import           Text.Parsec hiding ((<|>), many)

import qualified Control.Exception          as E
import qualified Data.Map                   as M
import qualified Data.IntMap                as IM
import qualified Data.Foldable              as F
import qualified Data.Traversable           as F
import qualified Data.Set                   as S
import qualified Data.Sequence              as Q
import qualified Data.ByteString            as B
import qualified Data.ByteString.Char8      as BC
import qualified Data.ByteString.Lazy       as BL
import qualified Data.ByteString.Lazy.Char8 as BLC
import qualified Data.Text                  as T
import qualified Data.Text.Lazy             as TL

import System.Wordexp.Simple

:set -fwarn-alternative-layout-rule-transitional
:set -fwarn-auto-orphans
:set -fwarn-deprecated-flags
:set -fwarn-deprecations
:set -fwarn-dodgy-exports
:set -fwarn-dodgy-foreign-imports
:set -fwarn-dodgy-imports
:set -fwarn-duplicate-exports
:set -fwarn-hi-shadowing
:set -fwarn-incomplete-patterns
:set -fwarn-incomplete-record-updates
:set -fwarn-lazy-unlifted-bindings
:set -fwarn-missing-fields
:set -fwarn-missing-methods
:set -fwarn-monomorphism-restriction
:set -fwarn-name-shadowing
:set -fwarn-orphans
:set -fwarn-overlapping-patterns
:set -fwarn-tabs
:set -fwarn-unrecognised-pragmas
:set -fwarn-unused-binds
:set -fwarn-unused-imports
:set -fwarn-unused-matches
:set -fwarn-warnings-deprecations
:set -fwarn-wrong-do-bind

:set -fno-warn-type-defaults
:set -fno-warn-unused-do-bind

:set -XBangPatterns
:set -XDataKinds
:set -XFlexibleContexts
:set -XFlexibleInstances
:set -XGADTs
:set -XGeneralizedNewtypeDeriving
:set -XImplicitParams
:set -XKindSignatures
:set -XLambdaCase
:set -XMultiWayIf
:set -XMultiParamTypeClasses
:set -XNoMonomorphismRestriction
:set -XOverloadedStrings
:set -XRankNTypes
:set -XTupleSections
:set -XTypeFamilies
:set -XUndecidableInstances
:set -XUnicodeSyntax
:set -XViewPatterns

:{
let asAppliedTo :: (a -> b) -> a -> (a -> b)
    asAppliedTo = const
:}

:set +t
