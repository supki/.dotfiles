:set prompt ">>> "
:set prompt2 ""
:set editor vim

import           Control.Applicative
import           Control.Monad
import           Data.Bits
import           Data.Char
import           Data.Data
import           Data.Fixed
import           Data.Function (fix, on)
import           Data.Foldable (Foldable, foldMap)
import           Data.Traversable (Traversable, traverse)
import           Data.Int
import           Data.List
import           Data.Maybe
import           Data.Ratio
import           Data.String
import           Data.Tuple
import           Data.Typeable
import           Data.Word
import           Debug.Trace
import           Numeric
import           System.IO
import           System.IO.Unsafe
import           Text.Printf
import           Text.Show.Functions
import           Unsafe.Coerce

import           Data.Functor.Identity
import           Data.Proxy
import           System.Directory
import           System.Environment
import           System.Exit
import           System.FilePath
import           System.Posix

import qualified Control.Exception          as E
import qualified Data.Map.Strict            as M
import qualified Data.IntMap.Strict         as IM
import qualified Data.Foldable              as F
import qualified Data.Traversable           as F
import qualified Data.Set                   as S
import qualified Data.IntSet                as IS
import qualified Data.Sequence              as Q
import qualified Data.ByteString            as B
import qualified Data.ByteString.Char8      as BC
import qualified Data.ByteString.Lazy       as BL
import qualified Data.ByteString.Lazy.Char8 as BLC

:set -Wall
:set -fno-warn-type-defaults

:set -XBangPatterns
:set -XDataKinds
:set -XDeriveDataTypeable
:set -XDeriveGeneric
:set -XDeriveFoldable
:set -XDeriveFunctor
:set -XDeriveTraversable
:set -XExistentialQuantification
:set -XFlexibleContexts
:set -XFlexibleInstances
:set -XFunctionalDependencies
:set -XGADTs
:set -XGeneralizedNewtypeDeriving
:set -XImplicitParams
:set -XKindSignatures
:set -XLambdaCase
:set -XMultiParamTypeClasses
:set -XMultiWayIf
:set -XPackageImports
:set -XQuasiQuotes
:set -XRankNTypes
:set -XScopedTypeVariables
:set -XStandaloneDeriving
:set -XTupleSections
:set -XTypeFamilies
:set -XTypeOperators
:set -XUndecidableInstances
:set -XUnicodeSyntax
:set -XViewPatterns

deriving instance Show a => Show (Identity a)
deriving instance Eq a => Eq (Identity a)
deriving instance Ord a => Ord (Identity a)

deriving instance Show a => Show (Const a b)
deriving instance Eq a => Eq (Const a b)
deriving instance Ord a => Ord (Const a b)

:set +t
