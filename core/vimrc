" General {
	" disable vi compatibility
	set nocompatible
	let g:neocomplcache_enable_at_startup = 1

	runtime macros/matchit.vim

	" set history to 1000 lines
	set history=1000

	" automatically reload when a file is changed outside of Vim
	set autoread

	" we have fast connections
	set ttyfast

	" enable pathogen
	call pathogen#infect()

	" share clipboard among instances
	set clipboard=unnamed
" }

" Appearance {
	" assume that background is dark
	set background=dark

	" load a colorscheme
	colorscheme zenburn

	" enable syntax highlighting
	syntax on

	" relative or no line numbers
	function SetRelative()
		if exists("+relativenumber")
			set relativenumber
		end
	endfunction

	function UnsetRelative()
		if exists("+relativenumber")
			set norelativenumber
		end
	endfunction

	augroup numbers
		autocmd!
		autocmd InsertEnter * :call UnsetRelative()
		autocmd InsertLeave * :call SetRelative()
	augroup end

	call SetRelative()

	" fix annoying ESC key delays
	set noesckeys

	" highlight current line and column
	set cursorline
	set cursorcolumn
	set colorcolumn=120

	" always show current cursor position
	set ruler
	set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)

	" show current command prompt
	set showcmd

	" always show status line
	set laststatus=2

	" show advanced information
	set statusline=%<%f%h%m%r%=format=%{&fileformat}\ file=%{&fileencoding}\ enc=%{&encoding}\ %b\ 0x%B\ %l,%c%V\ %P

	" enable autocomplete
	set wildmenu
	set wildmode=list:longest,full
	set wildignore=*.o,*.hi,*.pyc,*~

	au BufNewFile,BufRead *.agda setf agda

	" don't pause big listings
	set nomore

	" make vim message not to annoy
	set shortmess=aoOIT

	" always report about changed lines
	set report=0

	" let cursor move past the last char
	set virtualedit=block,onemore

	" minimum line numbers column width
	set numberwidth=2

	" save as root with w!!
	cmap w!! w !sudo tee % > /dev/null

	" show matching parens
	set showmatch
	set matchtime=2
" }

" Misc {
	" automatic tab indent
	set autoindent
	" don't unindent on new line
	set preserveindent
	" smart tab indent
	set smartindent
	" space width for tabs
	set tabstop=4
	" shift width for tabs
	set shiftwidth=4

	" place new splits on the right
	set splitright

	" dot affects yanks
	set cpoptions+=y

	" set indents
	augroup indents
		autocmd!
		autocmd FileType haskell setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType cabal   setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType racket  setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType ruby    setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType python  setlocal expandtab shiftwidth=4 softtabstop=4
		autocmd FileType perl    setlocal expandtab shiftwidth=2 softtabstop=2
	augroup end

	" save on focus lost
	autocmd FocusLost * :wa

	" enable filetype detection, plus loading of filetype plugins
	filetype plugin indent on

	" highligh search results
	set hlsearch
	" ignore cases in search queries
	set ignorecase
	set smartcase

	" set g default option to any s///
	set gdefault

	" enable wrap
	set wrap
	" wrap backspace, space, h, l, <-, ->, [ and ] keys
	set whichwrap=b,s,h,l,<,>,[,]
	" set word-wrap, not symbol-wrap
	set linebreak

	" lines to scroll when cursor leaves screen
	set scrolljump=7
	" lines before screen edge to scroll
	set scrolloff=1000

	" default encodings
	set termencoding=utf-8
	set encoding=utf-8
	set fileencoding=utf-8

	" manage backups
	set backup
	set backupdir=$HOME/.vim/backups
	" manage .swp files
	set directory=$HOME/.vim/temp
	" preserve undo actions even after file has closed
	if exists("+undofile")
		set undolevels=1000
		set undofile
	end

	" map leader to ,
	let mapleader = ","

	" highlight parentheses
	autocmd VimEnter *.rkt RainbowParenthesesToggle
	autocmd BufEnter *.rkt RainbowParenthesesLoadRound
	autocmd BufEnter *.rkt RainbowParenthesesLoadSquare

	" sane shell syntax
	autocmd BufEnter *.sh set syntax=zsh

	" enable omni-completion
	autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

	" drop occasional hdevtools highlight
	autocmd BufWrite *.hs HdevtoolsClear

	" highlight problematic whitespace
	highlight WhitespaceErrors ctermbg=Red guibg=#ff6a6a
	autocmd BufEnter * match WhitespaceErrors /\s\+$\|[^\t]\@<=\t\+/

	" enable hardmode
	autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
" }

" Keys mappings {
	" fix broken regex syntax
	nnoremap / /\v
	vnoremap / /\v

	" save one key press
	nnoremap ; :

	" map arrows and fix j and k
	nnoremap <up> <nop>
	nnoremap <down> <nop>
	nnoremap <left> <nop>
	nnoremap <right> <nop>
	inoremap <up> <nop>
	inoremap <down> <nop>
	inoremap <left> <nop>
	inoremap <right> <nop>
	nnoremap j gj
	nnoremap k gk

	" shift key fixes
	cnoremap WQ wq
	cnoremap wQ wq
	cnoremap Wq wq
	cnoremap Tabe tabe

	" disable search results highlighting
	noremap <leader>h :noh<bar>echo<CR>

	" toggle scratch buffer
	noremap <leader>s :VScratch<CR>

	" easy move to next bracket
	nnoremap <tab> %
	vnoremap <tab> %

	" add some hotkeys for vim-hdevtools commands
	nmap <leader>i :HdevtoolsInfo<CR>
	nmap <leader>t :HdevtoolsType<CR>
	nmap <leader>c :HdevtoolsClear<CR>

	" unite command
	nmap <leader>u :Unite

	" add some hotkeys for rather tedious perd commands
	nmap <leader>l :PerdLoad<CR>:call system('tmux select-layout main-vertical')<CR>
	nmap <leader>L :PerdLoad<CR>:call system('tmux select-layout main-vertical')<CR>:PerdSwitch<CR>
	nmap <leader>z :PerdUnload<CR>

	" fuck it
	nmap <leader>d :redraw!<CR>

	let g:perd_profiles = {
		\ 'raw': '',
		\ '7.6.1': '-isrc -package-db=cabal-dev/packages-7.6.1.conf',
		\ '7.6.1-dumb': '-package-db=cabal-dev/packages-7.6.1.conf',
		\ '7.6.2': '-isrc -package-db=cabal-dev/packages-7.6.2.conf',
		\ '7.6.2-dumb': '-package-db=cabal-dev/packages-7.6.2.conf'
		\ }
	let g:perd_profile = '7.6.2'

	nnoremap <Space> <C-D>
	nnoremap <S-Space> <C-U>

	let g:syntastic_haskell_checkers = ['hdevtools', 'hlint']
	let g:syntastic_cpp_compiler_options = '-std=c++11'
	let g:syntastic_always_populate_loc_list = 1
	let g:syntastic_auto_loc_list = 1
	let g:syntastic_auto_jump = 1

	call unite#filters#matcher_default#use(['matcher_fuzzy'])
	nnoremap <leader>w :Unite -no-split -buffer-name=files -start-insert file<CR>
	nnoremap <leader>e :Unite -no-split -buffer-name=buffer buffer<CR>

	" for vim-commentary
	autocmd FileType haskell set commentstring=--\ %s

	" for vim-perd
	autocmd VimResized * normal =
	autocmd VimLeave * bufdo :if exists(':PerdUnload') | execute 'PerdUnload' | endif
	autocmd BufDelete *.hs PerdUnload '<afile>'
" }

" Functions {
	" chmod +Ñ… to scripts
	function ModeChange()
		if getline(1) =~ '^#!'
			silent !chmod a+x <afile>
		endif
	endfunction

	autocmd BufWritePost * call ModeChange()


	" Convert markdown files to html with pandoc
	function RenderMarkdown()
		let l:markdown = expand("<afile>")
		let l:html     = expand("<afile>:r") . ".html"
		call system("pandoc --from markdown --to html -o " . l:html . " " . l:markdown)
		redraw!
	endfunction

	augroup render
		autocmd!
		autocmd BufWritePost README.md  call RenderMarkdown()
	augroup end

	function HaskellModuleName()
		let l:parts      = split(expand("%:p:r"), '/\+')
		let l:uppercased = []

		for l:part in reverse(l:parts)
			if l:part =~# '^[[:upper:]]'
				let l:uppercased = [l:part] + l:uppercased
			else
				break
			endif
		endfor

		let l:name  = join(l:uppercased, ".")
		if empty(name)
			return "Main"
		else
			return l:name
		endif
	endfunction

	command! HaskellModuleName exe "normal! imodule " . HaskellModuleName() . "\n(\n) where\n"
" }
