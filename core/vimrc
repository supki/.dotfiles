" General {
	" disable vi compatibility
	set nocompatible
	let g:neocomplcache_enable_at_startup = 1

	" set history to 1000 lines
	set history=1000

	" automatically reload when a file is changed outside of Vim
	set autoread

	" we have fast connections
	set ttyfast

	" enable pathogen
	call pathogen#infect()

	" share clipboard among instances
	set clipboard=unnamed
" }

" Appearance {
	" assume that background is dark
	set background=dark

	" load a colorscheme
	colorscheme zenburn

	" enable syntax highlighting
	syntax on

	" relative or absolute line numbers
	if exists("+relativenumber")
		set relativenumber
	else
		set number
	end

	" highlight current line and column
	set cursorline
	set cursorcolumn

	" always show current cursor position
	set ruler
	set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)

	" show current command prompt
	set showcmd

	" always show status line
	set laststatus=2

	" show advanced information
	set statusline=%<%f%h%m%r%=format=%{&fileformat}\ file=%{&fileencoding}\ enc=%{&encoding}\ %b\ 0x%B\ %l,%c%V\ %P

	" enable autocomplete
	set wildmenu
	set wildmode=list:longest,full
	set wildignore=*.o,*.hi,*.pyc,*~

	" don't pause big listings
	set nomore

	" make vim message not to annoy
	set shortmess=aoOIT

	" always report about changed lines
	set report=0

	" minimum line numbers column width
	set numberwidth=2

	" save as root with w!!
	cmap w!! w !sudo tee % > /dev/null

	" show matching parens
	set showmatch
	set matchtime=2
" }

" Misc {
	" automatic tab indent
	set autoindent
	" don't unindent on new line
	set preserveindent
	" smart tab indent
	set smartindent
	" space width for tabs
	set tabstop=4
	" shift width for tabs
	set shiftwidth=4

	" place new splits on the right
	set splitright

	" dot affects yanks
	set cpoptions+=y

	" set Haskell indent
	autocmd FileType haskell setlocal expandtab shiftwidth=2 softtabstop=2
	" set Racket indent
	autocmd FileType racket  setlocal expandtab shiftwidth=2 softtabstop=2
	" set Python indent
	autocmd FileType python  setlocal expandtab shiftwidth=4 softtabstop=4
	" set Ruby indent
	autocmd FileType python  setlocal expandtab shiftwidth=4 softtabstop=4

	" save on focus lost
	autocmd FocusLost * :wa

	" enable filetype detection, plus loading of filetype plugins
	filetype plugin indent on

	" highligh search results
	set hlsearch
	" ignore cases in search queries
	set ignorecase
	set smartcase

	" set g default option to any s///
	set gdefault

	" enable wrap
	set wrap
	" wrap backspace, space, h, l, <-, ->, [ and ] keys
	set whichwrap=b,s,h,l,<,>,[,]
	" set word-wrap, not symbol-wrap
	set linebreak

	" lines to scroll when cursor leaves screen
	set scrolljump=7
	" lines before screen edge to scroll
	set scrolloff=1000

	" default encodings
	set termencoding=utf-8
	set encoding=utf-8
	set fileencoding=utf-8

	" manage backups
	set backup
	set backupdir=$HOME/.vim/backups
	" manage .swp files
	set directory=$HOME/.vim/temp
	" preserve undo actions even after file has closed
	if exists("+undofile")
		set undolevels=1000
		set undofile
	end

	" map leader to ,
	let mapleader = ","

	" highlight parentheses
	au VimEnter *.rkt RainbowParenthesesToggle
	au Syntax racket RainbowParenthesesLoadRound

	" enable omni-completion
	autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

	" highlight problematic whitespace
	highlight WhitespaceErrors ctermbg=Red guibg=#ff6a6a
	autocmd BufEnter * match WhitespaceErrors /\s\+$\|[^\t]\@<=\t\+/

	" ghc-mod customs
	let g:ghcmod_ghc_options = ['-Wall', '-fno-warn-unused-do-bind', '-fno-warn-type-defaults']
" }

" Keys mappings {
	" fix broken regex syntax
	nnoremap / /\v
	vnoremap / /\v

	" save one key press
	nnoremap ; :

	" map arrows and fix j and k
	nnoremap <up> <nop>
	nnoremap <down> <nop>
	nnoremap <left> <nop>
	nnoremap <right> <nop>
	inoremap <up> <nop>
	inoremap <down> <nop>
	inoremap <left> <nop>
	inoremap <right> <nop>
	nnoremap j gj
	nnoremap k gk

	" shift key fixes
	cnoremap WQ wq
	cnoremap wQ wq
	cnoremap Wq wq
	cnoremap Tabe tabe

	" disable search results highlighting
	noremap <leader>h :noh<bar>echo<CR>

	" toggle scratch buffer
	noremap <leader>s :VScratch<CR>

	" paste file to pastebin
	noremap <leader>z :w \| !upload-pastebin % \| xsel<CR>

	" easy move to next bracket
	nnoremap <tab> %
	vnoremap <tab> %

	" fix rxvt shit
	map  <Esc>[5^ :tabp<CR>
	map  <Esc>[6^ :tabn<CR>

	" add some hotkeys for rather tedious ghc-mod commands
	nmap <leader>c :GhcModCheck<CR>
	nmap <leader>l :GhcModLint<CR>
	nmap <leader>t :GhcModType<CR>
	nmap <leader>T :GhcModTypeClear<CR>
	nmap <leader>y :YRShow<CR>
	nmap <leader>u :Unite 

	nnoremap <Space> <C-D>
	nnoremap <S-Space> <C-U>

	" manage "N registers with YankRing
	let g:yankring_manage_numbered_reg = 1
	" hide history file
	let g:yankring_history_file = '.yankring'

	let g:syntastic_mode_map = { 'mode': 'active',
		\ 'active_filetypes': [],
		\ 'passive_filetypes': ['haskell'] }

	let g:slime_target = "tmux"
" }

" Functions {
	" chmod +Ñ… to scripts
	function ModeChange()
		if getline(1) =~ '^#!'
			silent !chmod a+x <afile>
		endif
	endfunction
	autocmd BufWritePost * call ModeChange()
" }
