" General {
	" disable vi compatibility
	set nocompatible
	let g:neocomplcache_enable_at_startup = 1

	" set history to 1000 lines
	set history=1000

	" automatically reload when a file is changed outside of Vim
	set autoread

	" we have fast connections
	set ttyfast

	" enable pathogen
	call pathogen#infect()

	" share clipboard among instances
	set clipboard=unnamed
" }

" Appearance {
	" assume that background is dark
	set background=dark

	" load a colorschemes
	colorscheme seoul256

	" remove | characters in vertical split line
	set fillchars+=vert:\ 

	" enable syntax highlighting
	syntax on

	" fix annoying ESC key delays
	set noesckeys

	" highlight current line and column
	set cursorline
	set cursorcolumn
	set colorcolumn=80,90,120

	" always show current cursor position
	set ruler
	set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)

	" show current command prompt
	set showcmd

	" always show status line
	set laststatus=2

	" show advanced information
	set statusline=%<%f%h%m%r%=format=%{&fileformat}\ file=%{&fileencoding}\ enc=%{&encoding}\ %b\ 0x%B\ %l,%c%V\ %P

	" enable sane menu
	set wildmenu
	set wildmode=list:longest,full
	set wildignore=*.o,*.hi,*.pyc,*~

	" don't pause big listings
	set nomore

	" make vim message not to annoy
	set shortmess=aoOIT

	" always report about changed lines
	set report=0

	" let cursor move freely
	set virtualedit=all

	" minimum line numbers column width
	set numberwidth=2

	" save as root with w!!
	cmap w!! w !sudo tee % > /dev/null

	" show matching parens
	set showmatch
	set matchtime=2
" }

" Misc {
	" automatic tab indent
	set autoindent
	" don't unindent on new line
	set preserveindent
	" smart tab indent
	set smartindent
	" space width for tabs
	set tabstop=4
	" shift width for tabs
	set shiftwidth=4

	" place new splits on the right
	set splitbelow splitright

	" use already opened buffers
	set switchbuf=useopen,usetab

	" dot affects yanks
	set cpoptions+=y

	" set indents
	augroup indents
		autocmd!
		autocmd FileType haskell    setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType agda       setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType cabal      setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType racket     setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType ruby       setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType python     setlocal expandtab shiftwidth=4 softtabstop=4
		autocmd FileType perl       setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType pyret      setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType markdown   setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType sql        setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType html       setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType css        setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType javascript setlocal expandtab shiftwidth=4 softtabstop=4
	augroup end

	augroup swap_exists
		autocmd!
		autocmd SwapExists * let v:swapchoice = 'o'
	augroup end

	" ignore \ when matching {([])} in haskell code
	autocmd FileType haskell set cpoptions+=M

	" filetypes
	autocmd BufRead,BufNewFile Guardfile set filetype=ruby
	autocmd BufRead,BufNewFile .vim.custom set filetype=vim
	autocmd BufRead,BufNewFile *.md set filetype=markdown
	autocmd BufRead,BufNewFile *.tpl set filetype=html
	autocmd BufRead,BufNewFile *.hsc set filetype=haskell

	" vim from the stone age has no json syntax highlight
	if !filereadable(expand('$VIMRUNTIME/syntax/json.vim'))
		autocmd BufRead,BufNewFile *.json set filetype=javascript
	endif

	" save on focus lost
	autocmd FocusLost * :wa

	" enable filetype detection, plus loading of filetype plugins
	filetype plugin indent on

	" highligh search results
	set hlsearch
	" ignore cases in search queries
	set ignorecase
	set smartcase

	" set g default option to any s///
	set gdefault

	" enable wrap
	set wrap
	" wrap backspace, space, h, l, <-, ->, [ and ] keys
	set whichwrap=b,s,h,l,<,>,[,]
	" set word-wrap, not symbol-wrap
	set linebreak

	" lines to scroll when cursor leaves screen
	set scrolljump=7
	" lines before screen edge to scroll
	set scrolloff=1000

	" default encodings
	set termencoding=utf-8
	set encoding=utf-8
	set fileencoding=utf-8

	" manage backups
	set backup
	set backupdir=$HOME/.vim/backups
	" manage .swp files
	set directory=$HOME/.vim/temp

	" preserve undo actions even after file has closed
	if exists("+undofile")
		set undolevels=1000
		set undofile
	end

	" map leader to ,
	let mapleader = ","

	" color parens
	augroup rainbows
		autocmd!
		autocmd VimEnter * RainbowParenthesesToggle
		autocmd Syntax * RainbowParenthesesLoadRound
		autocmd Syntax * RainbowParenthesesLoadSquare
	augroup end

	" sane shell syntax
	autocmd BufEnter *.sh set syntax=zsh

	" enable omni-completion
	autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

	" for neco-ghc
	let g:necoghc_enable_detailed_browse = 1

	" drop occasional hdevtools highlight
	autocmd BufWrite *.hs HdevtoolsClear

	" highlight problematic whitespace
	highlight WhitespaceErrors ctermbg=Red guibg=#ff6a6a
	autocmd BufEnter * match WhitespaceErrors /\s\+$\|[^\t]\@<=\t\+/

	" enable hardmode
	autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
" }

" Keys mappings {
	" fix broken regex syntax
	nnoremap / /\v
	vnoremap / /\v

	" save one key press
	nnoremap ; :
	nnoremap : ;

	" map arrows and fix j and k
	nnoremap <up> <nop>
	nnoremap <down> <nop>
	nnoremap <left> <nop>
	nnoremap <right> <nop>
	inoremap <up> <nop>
	inoremap <down> <nop>
	inoremap <left> <nop>
	inoremap <right> <nop>
	nnoremap j gj
	nnoremap k gk

	" shift key fixes
	cnoremap WQ wq
	cnoremap wQ wq
	cnoremap Wq wq
	cnoremap Tabe tabe

	" disable search results highlighting
	noremap <leader>h :noh<bar>echo<CR>

	" easy move to next bracket
	nnoremap <tab> %
	vnoremap <tab> %

	" easy move to previous buffer
	nnoremap <leader><leader> <C-^>

	" add some hotkeys for vim-hdevtools commands
	nnoremap <leader>i :HdevtoolsInfo<CR>
	nnoremap <leader>t :HdevtoolsType<CR>
	nnoremap <leader>c :HdevtoolsClear<CR>

	" vim-flipping
	nnoremap <leader>m :Flip<CR>

	" fuck this
	nnoremap <leader>d :redraw!<CR>

	" fuck that
	noremap <S-k> <NOP>

	nnoremap <Space> <C-D>
	nnoremap <S-Space> <C-U>

	let g:vim_flipping_mkdir = 1
	let g:vim_flipping_substitutions =
		\ { 'src/Main(\.l?hs)':      'test/Spec\1'
		\ , 'test/Spec(\.l?hs)':     'src/Main\1'
		\ , 'src/(.+)(\.l?hs)':      'test/\1Spec\2'
		\ , 'test/(.+)Spec(\.l?hs)': 'src/\1\2'
		\ , 'lib/(.+).rb':           'spec/\1_spec.rb'
		\ , 'spec/(.+)_spec.rb':     'lib/\1.rb'
		\ , 'template/app.tpl':      'static/css/main.css'
		\ , 'template/(.+).tpl':     'static/css/\1.css'
		\ , 'static/css/main.css':   'template/app.tpl'
		\ , 'static/css/(.+).css':   'template/\1.tpl'
		\ }

	" Insert haskell module name
	function HaskellModuleName()
		let l:parts      = split(expand("%:p:r"), '/\+')
		let l:uppercased = []

		for l:part in reverse(l:parts)
			if l:part =~# '^[[:upper:]]'
				let l:uppercased = [l:part] + l:uppercased
			else
				break
			endif
		endfor

		let l:name  = join(l:uppercased, ".")
		if empty(name)
			return "Main"
		else
			return l:name
		endif
	endfunction

	let g:vim_jinjing_matches =
		\ { 'test/Spec.l?hs': ['Spec.tpl',    {}]
		\ , 'test/.+Spec.hs': ['Foo.tpl',
			\ { 'module':
				\ { 'name': function("HaskellModuleName")
				\ , 'imports': ['Test.Hspec']
				\ }
			\ }]
		\ , 'src/.+.hs':      ['Foo.tpl',
			\ { 'module':
				\ { 'name': function("HaskellModuleName")
				\ }
			\ }]
		\ , '^[a-z-]+.hs':     ['Foo.tpl',
			\ { 'module':
				\ { 'name': 'Main'
				\ }
			\ }]
		\ }

	let g:syntastic_check_on_wq = 0
	let g:syntastic_haskell_checkers = ['hdevtools', 'hlint']
	let g:syntastic_python_python_exe = 'python3'
	let g:syntastic_cpp_compiler_options = '-std=c++11'
	let g:syntastic_always_populate_loc_list = 1
	let g:syntastic_auto_loc_list = 1
	let g:syntastic_auto_jump = 1

	call unite#filters#matcher_default#use(['matcher_fuzzy'])
	let g:unite_source_haddock_browser = 'x-www-browser'
	nnoremap <leader>w :Unite -no-split -buffer-name=files -start-insert file<CR>
	nnoremap <leader>e :Unite -no-split -buffer-name=buffer buffer<CR>
	nnoremap <leader>g :Unite -no-split -buffer-name=haddock haddock<CR>

	" for vim-bling
	let g:bling_color=216

	" for vim-commentary
	augroup comments
		autocmd!
		autocmd FileType haskell    set commentstring=--\ %s
		autocmd FileType agda       set commentstring=--\ %s
		autocmd FileType cabal      set commentstring=--\ %s
		autocmd FileType ocaml      set commentstring=(*\ %s\ *)
		autocmd FileType debsources set commentstring=#\ %s
		autocmd FileType awk        set commentstring=#\ %s
		autocmd FileType resolv     set commentstring=#\ %s
	augroup end

	au BufReadCmd   *.epub      call zip#Browse(expand("<amatch>"))
" }

" Functions {
	" relative or no line numbers
	function SetRelative()
		if exists("+relativenumber")
			set relativenumber
		end
	endfunction

	function UnsetRelative()
		if exists("+relativenumber")
			set norelativenumber
		end
	endfunction

	augroup numbers
		autocmd!
		autocmd InsertEnter * :call UnsetRelative()
		autocmd InsertLeave * :call SetRelative()
	augroup end

	call SetRelative()


	" chmod +Ñ… to scripts
	function ModeChange()
		if getline(1) =~ '^#!'
			silent !chmod a+x <afile>
		endif
	endfunction

	autocmd BufWritePost * call ModeChange()


	" Convert markdown files to html with pandoc
	function RenderHtml()
		let l:extension = expand("<afile>:p:e")
		let l:fullpath  = expand("<afile>:p")
		if l:extension == "lhs"
			let l:format = "markdown+lhs"
		else
			let l:format = "markdown"
		endif
		let l:html     = expand("<afile>:p:r") . ".html"
		call system("pandoc --from " . l:format . " --to html --css ~/.readme-gen.css -o " . l:html . " " . l:fullpath)

		" I am sorry
		let l:js = "var uri     = \"file://" . l:html . "\";\n" .
					\ "var opened  = false;\n" .
					\ "\n" .
					\ "Array.prototype.forEach.call(\n" .
					\ "  window.getBrowser().tabContainer.childNodes,\n" .
					\ "  function (tab) {\n" .
					\ "    var browser = tab.linkedBrowser;\n" .
					\ "    if (browser.contentDocument.location == uri) {\n" .
					\ "      browser.reload(gBrowser.webNavigation.LOAD_FLAGS_BYPASS_CACHE)\n" .
					\ "      opened = true;\n" .
					\ "    }\n" .
					\ "  });\n" .
					\ "\n" .
					\ "if (!opened) {\n" .
					\ "  window.getBrowser().addTab(uri)\n" .
					\ "}\n"

		" Really :(
		call system("(netcat localhost 4242 <<< '" . l:js . "') &; sleep 0.2; kill $!; rm '" . l:html . "'" )
		redraw!
	endfunction

	augroup render
		autocmd!
		autocmd BufWritePost *.markdown call RenderHtml()
		autocmd BufWritePost *.md       call RenderHtml()
		autocmd BufWritePost *.lhs      call RenderHtml()
	augroup end


	command! HaskellModuleName exe "normal! ggimodule " . HaskellModuleName() . "\n(\n) where\n\n``"

	command! Haskell98 exe "normal! ggO0C{-# LANGUAGE Haskell98 #-}``"
	command! Haskell2010 exe "normal! ggO0C{-# LANGUAGE Haskell2010 #-}``"
	command! Unsafe exe "normal! ggO0C{-# LANGUAGE Unsafe #-}``"
	command! Trustworthy exe "normal! ggO0C{-# LANGUAGE Trustworthy #-}``"
	command! Safe exe "normal! ggO0C{-# LANGUAGE Safe #-}``"
	command! CPP exe "normal! ggO0C{-# LANGUAGE CPP #-}``"
	command! PostfixOperators exe "normal! ggO0C{-# LANGUAGE PostfixOperators #-}``"
	command! TupleSections exe "normal! ggO0C{-# LANGUAGE TupleSections #-}``"
	command! PatternGuards exe "normal! ggO0C{-# LANGUAGE PatternGuards #-}``"
	command! UnicodeSyntax exe "normal! ggO0C{-# LANGUAGE UnicodeSyntax #-}``"
	command! MagicHash exe "normal! ggO0C{-# LANGUAGE MagicHash #-}``"
	command! PolymorphicComponents exe "normal! ggO0C{-# LANGUAGE PolymorphicComponents #-}``"
	command! ExistentialQuantification exe "normal! ggO0C{-# LANGUAGE ExistentialQuantification #-}``"
	command! KindSignatures exe "normal! ggO0C{-# LANGUAGE KindSignatures #-}``"
	command! EmptyDataDecls exe "normal! ggO0C{-# LANGUAGE EmptyDataDecls #-}``"
	command! ParallelListComp exe "normal! ggO0C{-# LANGUAGE ParallelListComp #-}``"
	command! TransformListComp exe "normal! ggO0C{-# LANGUAGE TransformListComp #-}``"
	command! MonadComprehensions exe "normal! ggO0C{-# LANGUAGE MonadComprehensions #-}``"
	command! ForeignFunctionInterface exe "normal! ggO0C{-# LANGUAGE ForeignFunctionInterface #-}``"
	command! UnliftedFFITypes exe "normal! ggO0C{-# LANGUAGE UnliftedFFITypes #-}``"
	command! InterruptibleFFI exe "normal! ggO0C{-# LANGUAGE InterruptibleFFI #-}``"
	command! CApiFFI exe "normal! ggO0C{-# LANGUAGE CApiFFI #-}``"
	command! GHCForeignImportPrim exe "normal! ggO0C{-# LANGUAGE GHCForeignImportPrim #-}``"
	command! LiberalTypeSynonyms exe "normal! ggO0C{-# LANGUAGE LiberalTypeSynonyms #-}``"
	command! Rank2Types exe "normal! ggO0C{-# LANGUAGE Rank2Types #-}``"
	command! RankNTypes exe "normal! ggO0C{-# LANGUAGE RankNTypes #-}``"
	command! ImpredicativeTypes exe "normal! ggO0C{-# LANGUAGE ImpredicativeTypes #-}``"
	command! TypeOperators exe "normal! ggO0C{-# LANGUAGE TypeOperators #-}``"
	command! ExplicitNamespaces exe "normal! ggO0C{-# LANGUAGE ExplicitNamespaces #-}``"
	command! RecursiveDo exe "normal! ggO0C{-# LANGUAGE RecursiveDo #-}``"
	command! DoRec exe "normal! ggO0C{-# LANGUAGE DoRec #-}``"
	command! Arrows exe "normal! ggO0C{-# LANGUAGE Arrows #-}``"
	command! ParallelArrays exe "normal! ggO0C{-# LANGUAGE ParallelArrays #-}``"
	command! TemplateHaskell exe "normal! ggO0C{-# LANGUAGE TemplateHaskell #-}``"
	command! QuasiQuotes exe "normal! ggO0C{-# LANGUAGE QuasiQuotes #-}``"
	command! ImplicitPrelude exe "normal! ggO0C{-# LANGUAGE ImplicitPrelude #-}``"
	command! NoImplicitPrelude exe "normal! ggO0C{-# LANGUAGE NoImplicitPrelude #-}``"
	command! RecordWildCards exe "normal! ggO0C{-# LANGUAGE RecordWildCards #-}``"
	command! NamedFieldPuns exe "normal! ggO0C{-# LANGUAGE NamedFieldPuns #-}``"
	command! RecordPuns exe "normal! ggO0C{-# LANGUAGE RecordPuns #-}``"
	command! DisambiguateRecordFields exe "normal! ggO0C{-# LANGUAGE DisambiguateRecordFields #-}``"
	command! OverloadedStrings exe "normal! ggO0C{-# LANGUAGE OverloadedStrings #-}``"
	command! GADTs exe "normal! ggO0C{-# LANGUAGE GADTs #-}``"
	command! GADTSyntax exe "normal! ggO0C{-# LANGUAGE GADTSyntax #-}``"
	command! ViewPatterns exe "normal! ggO0C{-# LANGUAGE ViewPatterns #-}``"
	command! TypeFamilies exe "normal! ggO0C{-# LANGUAGE TypeFamilies #-}``"
	command! BangPatterns exe "normal! ggO0C{-# LANGUAGE BangPatterns #-}``"
	command! MonomorphismRestriction exe "normal! ggO0C{-# LANGUAGE MonomorphismRestriction #-}``"
	command! NoMonomorphismRestriction exe "normal! ggO0C{-# LANGUAGE NoMonomorphismRestriction #-}``"
	command! NPlusKPatterns exe "normal! ggO0C{-# LANGUAGE NPlusKPatterns #-}``"
	command! DoAndIfThenElse exe "normal! ggO0C{-# LANGUAGE DoAndIfThenElse #-}``"
	command! RebindableSyntax exe "normal! ggO0C{-# LANGUAGE RebindableSyntax #-}``"
	command! ConstraintKinds exe "normal! ggO0C{-# LANGUAGE ConstraintKinds #-}``"
	command! PolyKinds exe "normal! ggO0C{-# LANGUAGE PolyKinds #-}``"
	command! DataKinds exe "normal! ggO0C{-# LANGUAGE DataKinds #-}``"
	command! InstanceSigs exe "normal! ggO0C{-# LANGUAGE InstanceSigs #-}``"
	command! MonoPatBinds exe "normal! ggO0C{-# LANGUAGE MonoPatBinds #-}``"
	command! ExplicitForAll exe "normal! ggO0C{-# LANGUAGE ExplicitForAll #-}``"
	command! AlternativeLayoutRule exe "normal! ggO0C{-# LANGUAGE AlternativeLayoutRule #-}``"
	command! AlternativeLayoutRuleTransitional exe "normal! ggO0C{-# LANGUAGE AlternativeLayoutRuleTransitional #-}``"
	command! DatatypeContexts exe "normal! ggO0C{-# LANGUAGE DatatypeContexts #-}``"
	command! RelaxedLayout exe "normal! ggO0C{-# LANGUAGE RelaxedLayout #-}``"
	command! TraditionalRecordSyntax exe "normal! ggO0C{-# LANGUAGE TraditionalRecordSyntax #-}``"
	command! LambdaCase exe "normal! ggO0C{-# LANGUAGE LambdaCase #-}``"
	command! MultiWayIf exe "normal! ggO0C{-# LANGUAGE MultiWayIf #-}``"
	command! MonoLocalBinds exe "normal! ggO0C{-# LANGUAGE MonoLocalBinds #-}``"
	command! RelaxedPolyRec exe "normal! ggO0C{-# LANGUAGE RelaxedPolyRec #-}``"
	command! ExtendedDefaultRules exe "normal! ggO0C{-# LANGUAGE ExtendedDefaultRules #-}``"
	command! ImplicitParams exe "normal! ggO0C{-# LANGUAGE ImplicitParams #-}``"
	command! ScopedTypeVariables exe "normal! ggO0C{-# LANGUAGE ScopedTypeVariables #-}``"
	command! PatternSignatures exe "normal! ggO0C{-# LANGUAGE PatternSignatures #-}``"
	command! UnboxedTuples exe "normal! ggO0C{-# LANGUAGE UnboxedTuples #-}``"
	command! StandaloneDeriving exe "normal! ggO0C{-# LANGUAGE StandaloneDeriving #-}``"
	command! DeriveDataTypeable exe "normal! ggO0C{-# LANGUAGE DeriveDataTypeable #-}``"
	command! DeriveFunctor exe "normal! ggO0C{-# LANGUAGE DeriveFunctor #-}``"
	command! DeriveTraversable exe "normal! ggO0C{-# LANGUAGE DeriveTraversable #-}``"
	command! DeriveFoldable exe "normal! ggO0C{-# LANGUAGE DeriveFoldable #-}``"
	command! DeriveGeneric exe "normal! ggO0C{-# LANGUAGE DeriveGeneric #-}``"
	command! DefaultSignatures exe "normal! ggO0C{-# LANGUAGE DefaultSignatures #-}``"
	command! TypeSynonymInstances exe "normal! ggO0C{-# LANGUAGE TypeSynonymInstances #-}``"
	command! FlexibleContexts exe "normal! ggO0C{-# LANGUAGE FlexibleContexts #-}``"
	command! FlexibleInstances exe "normal! ggO0C{-# LANGUAGE FlexibleInstances #-}``"
	command! ConstrainedClassMethods exe "normal! ggO0C{-# LANGUAGE ConstrainedClassMethods #-}``"
	command! MultiParamTypeClasses exe "normal! ggO0C{-# LANGUAGE MultiParamTypeClasses #-}``"
	command! FunctionalDependencies exe "normal! ggO0C{-# LANGUAGE FunctionalDependencies #-}``"
	command! GeneralizedNewtypeDeriving exe "normal! ggO0C{-# LANGUAGE GeneralizedNewtypeDeriving #-}``"
	command! OverlappingInstances exe "normal! ggO0C{-# LANGUAGE OverlappingInstances #-}``"
	command! UndecidableInstances exe "normal! ggO0C{-# LANGUAGE UndecidableInstances #-}``"
	command! IncoherentInstances exe "normal! ggO0C{-# LANGUAGE IncoherentInstances #-}``"
	command! PackageImports exe "normal! ggO0C{-# LANGUAGE PackageImports #-}``"
" }
