" General {
	" disable vi compatibility
	set nocompatible
	let g:neocomplcache_enable_at_startup = 1

	" set history to 1000 lines
	set history=1000

	" automatically reload when a file is changed outside of Vim
	set autoread

	" we have fast connections
	set ttyfast

	" enable pathogen
	call pathogen#infect()

	" share clipboard among instances
	set clipboard=unnamed
" }

" Appearance {
	" assume that background is dark
	set background=dark

	" show relative line numbers
	set relativenumber

	" load a colorschemes
	colorscheme seoul256

	" remove | characters in vertical split line
	set fillchars+=vert:\ 

	" enable syntax highlighting
	syntax on

	" fix annoying ESC key delays
	set noesckeys

	" highlight current line and column
	set cursorline
	set cursorcolumn
	set colorcolumn=80,90,120

	" always show current cursor position
	set ruler
	set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)

	" show current command prompt
	set showcmd

	" always show status line
	set laststatus=2

	" show advanced information
	set statusline=%<%f%h%m%r%=format=%{&fileformat}\ file=%{&fileencoding}\ enc=%{&encoding}\ %b\ 0x%B\ %l,%c%V\ %P

	" enable sane menu
	set wildmenu
	set wildmode=list:longest,full
	set wildignore=*.o,*.hi,*.pyc,*~,*.dyn_o,*.dyn_hi

	" don't pause big listings
	set nomore

	" make vim message not to annoy
	set shortmess=aoOIT

	" always report about changed lines
	set report=0

	" let cursor move freely
	set virtualedit=all

	" minimum line numbers column width
	set numberwidth=2

	" save as root with w!!
	cmap w!! w !sudo tee % > /dev/null

	" show matching parens
	set showmatch
	set matchtime=2
" }

" Misc {
	" automatic tab indent
	set autoindent
	" don't unindent on new line
	set preserveindent
	" smart tab indent
	set smartindent
	" space width for tabs
	set tabstop=4
	" shift width for tabs
	set shiftwidth=4
	" round indent shifts
	set shiftround

	" place new splits on the right
	set splitbelow splitright

	" use already opened buffers
	set switchbuf=useopen,usetab

	" dot affects yanks
	set cpoptions+=y

	" set indents
	augroup indents
		autocmd!
		autocmd FileType haskell    setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType agda       setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType cabal      setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType racket     setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType ruby       setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType python     setlocal expandtab shiftwidth=4 softtabstop=4
		autocmd FileType perl       setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType pyret      setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType markdown   setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType sql        setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType html       setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType css        setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType javascript setlocal expandtab shiftwidth=4 softtabstop=4
		autocmd FileType scala      setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType treetop    setlocal expandtab shiftwidth=2 softtabstop=2
		autocmd FileType rust       setlocal expandtab shiftwidth=4 softtabstop=4
		autocmd FileType groovy     setlocal expandtab shiftwidth=2 softtabstop=2
	augroup end

	augroup swap_exists
		autocmd!
		autocmd SwapExists * let v:swapchoice = 'o'
	augroup end

	" ignore \ when matching {([])} in haskell code
	autocmd FileType haskell set cpoptions+=M

	" filetypes
	autocmd BufRead,BufNewFile Guardfile set filetype=ruby
	autocmd BufRead,BufNewFile .vim.custom set filetype=vim
	autocmd BufRead,BufNewFile *.md set filetype=markdown
	autocmd BufRead,BufNewFile *.tpl set filetype=html
	autocmd BufRead,BufNewFile *.hsc set filetype=haskell

	" vim from the stone age has no json syntax highlight
	if !filereadable(expand('$VIMRUNTIME/syntax/json.vim'))
		autocmd BufRead,BufNewFile *.json set filetype=javascript
	endif

	" save on focus lost
	autocmd FocusLost * :wa

	" enable filetype detection, plus loading of filetype plugins
	filetype plugin indent on

	" highligh search results
	set hlsearch
	" start search before <CR>
	set incsearch
	" ignore cases in search queries
	set ignorecase
	set smartcase

	" set g default option to any s///
	set gdefault

	" enable wrap
	set wrap
	" wrap backspace, space, h, l, <-, ->, [ and ] keys
	set whichwrap=b,s,h,l,<,>,[,]
	" set word-wrap, not symbol-wrap
	set linebreak

	" lines to scroll when cursor leaves screen
	set scrolljump=7
	" lines before screen edge to scroll
	set scrolloff=1000

	" default encodings
	set termencoding=utf-8
	set encoding=utf-8
	set fileencoding=utf-8

	" manage backups
	set backup
	set backupdir=$HOME/.vim/backups
	" manage .swp files
	set directory=$HOME/.vim/temp

	" preserve undo actions even after file has closed
	if exists("+undofile")
		set undolevels=1000
		set undofile
	end

	" map leader to ,
	let mapleader = ","

	" color parens
	augroup rainbows
		" unfortunately it fucks up (* *)-style comments badly :'(
		let norainbow = ['coq', 'sml', 'ocaml']
		autocmd!
		autocmd VimEnter * if index(norainbow, &ft) < 0 | RainbowParenthesesToggle
		autocmd Syntax   * if index(norainbow, &ft) < 0 | RainbowParenthesesLoadRound
		autocmd Syntax   * if index(norainbow, &ft) < 0 | RainbowParenthesesLoadSquare
	augroup end

	" sane shell syntax
	autocmd BufEnter *.sh set syntax=zsh

	" enable omni-completion
	autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

	" for neco-ghc
	let g:necoghc_enable_detailed_browse = 1

	" drop occasional hdevtools highlight
	autocmd BufWrite *.hs HdevtoolsClear

	" highlight problematic whitespace
	highlight WhitespaceErrors ctermbg=Red guibg=#ff6a6a
	autocmd BufEnter * match WhitespaceErrors /\s\+$\|[^\t]\@<=\t\+/

	" enable hardmode
	autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
" }

" Keys mappings {
	" fix broken regex syntax
	nnoremap / /\v
	vnoremap / /\v

	" save one key press
	nnoremap ; :

	" map arrows and fix j and k
	nnoremap <up> <nop>
	nnoremap <down> <nop>
	nnoremap <left> <nop>
	nnoremap <right> <nop>
	inoremap <up> <nop>
	inoremap <down> <nop>
	inoremap <left> <nop>
	inoremap <right> <nop>
	nnoremap j gj
	nnoremap k gk

	" shift key fixes
	cnoremap WQ wq
	cnoremap wQ wq
	cnoremap Wq wq
	cnoremap Tabe tabe

	" disable search results highlighting
	noremap <leader>h :noh<bar>echo<CR>

	" easy move to next bracket
	nmap <tab> %
	vmap <tab> %

	" easy move to previous buffer
	nnoremap <leader><leader> <C-^>

	" add some hotkeys for vim-hdevtools commands
	nnoremap <leader>i :HdevtoolsInfo<CR>
	nnoremap <leader>t :HdevtoolsType<CR>
	nnoremap <leader>c :HdevtoolsClear<CR>

	" vim-flipping
	nnoremap <leader>m :Flip<CR>

	" fuck this
	nnoremap <leader>d :redraw!<CR>

	" fuck that
	noremap <S-k> <NOP>

	" CommandT keybindings
	nnoremap <leader>e :CommandT<CR>
	nnoremap <leader>b :CommandTMRU<CR>

	nnoremap <Space> <C-D>
	nnoremap <S-Space> <C-U>

	let g:vim_flipping_mkdir = 1
	let g:vim_flipping_substitutions =
		\ { 'src/Main(\.l?hs)':      'test/Spec\1'
		\ , 'test/Spec(\.l?hs)':     'src/Main\1'
		\ , 'src/(.+)(\.l?hs)':      'test/\1Spec\2'
		\ , 'test/(.+)Spec(\.l?hs)': 'src/\1\2'
		\ , 'lib/(.+).rb':           'spec/\1_spec.rb'
		\ , 'spec/(.+)_spec.rb':     'lib/\1.rb'
		\ , 'template/app.tpl':      'static/css/main.css'
		\ , 'template/(.+).tpl':     'static/css/\1.css'
		\ , 'static/css/main.css':   'template/app.tpl'
		\ , 'static/css/(.+).css':   'template/\1.tpl'
		\ }

	" Insert haskell module name
	function HaskellModuleName()
		let l:parts      = split(expand("%:p:r"), '/\+')
		let l:uppercased = []

		for l:part in reverse(l:parts)
			if l:part =~# '^[[:upper:]]'
				let l:uppercased = [l:part] + l:uppercased
			else
				break
			endif
		endfor

		let l:name  = join(l:uppercased, ".")
		if empty(name)
			return "Main"
		else
			return l:name
		endif
	endfunction

	let g:vim_jinjing_matches =
		\ { 'test/Spec.l?hs': ['Spec.tpl', {}]
		\ , 'test/.+Spec.hs': ['FooSpec.tpl',
			\ { 'module':
				\ { 'name': function("HaskellModuleName")
				\ , 'imports': ['Test.Hspec']
				\ }
			\ }]
		\ , 'src/.+.hs':      ['Foo.tpl',
			\ { 'module':
				\ { 'name': function("HaskellModuleName")
				\ }
			\ }]
		\ , '^[a-z-]+.hs':     ['Foo.tpl',
			\ { 'module':
				\ { 'name': 'Main'
				\ }
			\ }]
		\ , '.+.py':           ['P3.tpl', {}]
		\ }

	let g:syntastic_check_on_wq = 0
	let g:syntastic_haskell_checkers = ['hdevtools', 'hlint']
	if executable("python3")
		let g:syntastic_python_python_exec = 'python3'
	endif
	let g:syntastic_cpp_compiler_options = '-std=c++11'
	let g:syntastic_always_populate_loc_list = 1
	let g:syntastic_auto_loc_list = 1
	let g:syntastic_auto_jump = 1
	let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': [], 'passive_filetypes': ['racket'] }

	" Command-T options
	let g:CommandTFileScanner = 'find'
	let g:CommandTMatchWindowAtTop = 1
	let g:CommandTAcceptSelectionMap = '<C-j>'
	let g:CommandTSelectNextMap = ['Down', '<C-n>']
	let g:CommandTCancelMap = ['<C-c>', '<Esc>']
	let g:CommandTWildIgnore = &wildignore . ',cookbooks/*,.env_*'

	" for vim-bling
	let g:bling_color=216

	" coquille
	let g:coquille_auto_move = 'true'

	" for haskell-vim
	let g:haskell_enable_quantification = 1
	let g:haskell_enable_typeroles = 1
	let g:haskell_indent_if = 2
	let g:haskell_indent_case = 2

	" for vim-airline
	let g:airline_left_sep=''
	let g:airline_right_sep=''
	let g:airline_theme='zenburn'

	augroup coquille
		autocmd!
		autocmd FileType coq nmap <leader>l :CoqLaunch<CR>
		autocmd FileType coq nmap <leader>k :CoqKill<CR>
		autocmd FileType coq nmap <leader>n :CoqNext<CR>
		autocmd FileType coq imap <leader>n <C-O><leader>n
		autocmd FileType coq nmap <leader>m :CoqToCursor<CR>
		autocmd FileType coq imap <leader>m <C-O><leader>m
		autocmd FileType coq nmap <leader>u :CoqUndo<CR>
		autocmd FileType coq imap <leader>u <C-O><leader>u
		autocmd FileType coq nmap <leader>r :CoqUndo<CR>:CoqNext<CR>
		autocmd FileType coq imap <leader>r <C-O>:CoqUndo<CR><C-O>:CoqNext<CR>
		autocmd FileType coq imap . .<C-O>:CoqToCursor<CR>

		autocmd FileType coq autocmd BufLeave *.v silent! :CoqKill
		autocmd FileType coq autocmd BufEnter *.v :CoqLaunch
		autocmd FileType coq autocmd InsertEnter *.v :CoqToCursor
		autocmd FileType coq nunmap <C-j>
	augroup end

	" for vim-commentary
	augroup comments
		autocmd!
		" sane languages
		autocmd FileType haskell    set commentstring=--\ %s
		autocmd FileType agda       set commentstring=--\ %s
		autocmd FileType cabal      set commentstring=--\ %s
		autocmd FileType sql        set commentstring=--\ %s
		autocmd FileType idris      set commentstring=--\ %s
		" other languages
		autocmd FileType ocaml      set commentstring=(*\ %s\ *)
		autocmd FileType coq        set commentstring=(*\ %s\ *)
		autocmd FileType sml        set commentstring=(*\ %s\ *)
		autocmd FileType debsources set commentstring=#\ %s
		autocmd FileType awk        set commentstring=#\ %s
		autocmd FileType resolv     set commentstring=#\ %s
		autocmd FileType racket     set commentstring=;\ %s
	augroup end

	au BufReadCmd   *.epub      call zip#Browse(expand("<amatch>"))
" }

" Functions {
	" chmod +х to scripts
	function ModeChange()
		if getline(1) =~ '^#!'
			silent !chmod a+x <afile>
		endif
	endfunction

	autocmd BufWritePost * call ModeChange()

	command Sbrowse echomsg system('svn-browse ' . expand('%') . ' 2>/dev/null')

	runtime! macros/matchit.vim

	let g:go_disable_autoinstall = 1
	let g:go_fmt_command = "gofmt"

	autocmd FileType go nmap <leader>r <Plug>(go-run)
" }
